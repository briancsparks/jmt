#!/usr/bin/env bash
# vim: filetype=sh :

# Usage: buildout name-of-remote-server

#---
# To add:
#   echo "export RAILS_ENV=integration" >> .profile
#---

#---
# Restarting server:
#   echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
#   vim application/current/config/database.yml application/current/config/utility.yml 
#
# Restarting app server:
#   sudo nginx -t && sudo nginx
#
#   tail -F application/current/log/integration.log
#
# Restarting worker
#   cd application/current/ && ./START_RESQUE_WORKER 
#
#---

die() {
  echo $1
  xcode="99"
  [[ $# > 1 ]] && xcode="$2"
  exit $xcode
}

remote=""
if [[ $# > 0 && $1 != --force && $1 != --user ]]
then
  remote=$1
  shift
fi

forced=""
if [[ $# > 0 && $1 == --force ]]
then
  shift
  forced="$1"
  shift
fi

user="scotty"
if [[ $# > 0 && $1 == --user ]]
then
  shift
  user="$1"
  shift
fi


if [[ -n "$remote" ]]
then
  echo "Running local"

  scp $0 ubuntu@${remote}:buildout

  for ((;;))
  do
    cmd="bash -x ./buildout"
    if [[ -n "$forced" ]]
    then
      cmd="${cmd} --force ${forced}"
    fi

    if [[ -n "$user" ]]
    then
      cmd="${cmd} --user ${user}"
    fi

    scp $0 ${user}@${remote}:buildout
    ssh -A ${user}@${remote} 'chmod +x buildout'
    ssh -A ${user}@${remote} $cmd
    result="$?"
    echo "Result $result"
    if [[ $result == 0 ]]; then die "Done" 0; fi

    if [[ "$result" == 255 ]]
    then
      ssh -A ubuntu@${remote} 'chmod +x buildout'
      ssh -A ubuntu@${remote} $cmd
      result="$?"
      echo "ubuntu Result $result"
      if [[ "$result" == 9 ]]; then die "Follow instructions and re-run:  ssh -A ubuntu@${remote} "; fi
    fi

    test $result && die "Zero from server -- done"
    sleep 0.5
  done
else

  echo "Running remote"
  sudo chmod a+w /tmp 2>&1 > /dev/null

  #----- Machine-level things -----

  # Set the hostname
  if ! grep `hostname` /etc/hosts 2>&1 > /dev/null
  then
    echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
  fi

  # Create the scotty user, in prep of killing the ubuntu user
  if [[ `whoami` == ubuntu ]]
  then
    sudo useradd -m -s /bin/bash -G admin ${user}
    sudo usermod -G staff -a ${user}
    sudo cp -r ~/.ssh ../${user}
    sudo chown -R ${user}:${user} ../${user}

    echo "---------------------------------------------------------------------------"
    echo "You MUST give scotty nopasswd sudo now... Invoke sudo visudo, and correct %admin ALL=(ALL) NOPASSWD:ALL"
    echo "   Log back into the server as ubuntu; then sudo visudo"
    echo "   Also, ssh git@github.com"
    echo 
    echo "   ssh -A ubuntu@..."
    echo "---------------------------------------------------------------------------"
    echo "Exiting with 9"
    exit 9
  fi

  if [[ `whoami` == ${user} ]]
  then

    # Store up messages, spit them out at the end
    rm /tmp/buildout-message

    # Steal the ubuntu users data files, and kill the user
    cd
    if ! [[ -d ubuntu_user ]]
    then

      mkdir -p ubuntu_user
      cd /home/ubuntu/ && sudo rm -rf .cache/ && sudo rm -rf .ssh/ && sudo find . -type f | while read f; do sudo cp $f ${HOME}/ubuntu_user/; done

      cd
      sudo chown -R ${user}:${user} ubuntu_user/
      sudo userdel -r ubuntu
    fi

    # ---------- Nothing works without 777 /tmp ----------
    if ! stat /tmp | egrep -i '^access:.+777'; then
      sudo chmod 777 /tmp
      echo "Must log back in"
      exit 0
    fi

    # ---------- Install rudimentary stuff ----------
    cd
    if ! dpkg -s git-core 2> /dev/null > /dev/null
    then
      sudo apt-get update && sudo apt-get install -y libreadline6 git-core build-essential git
    fi

    # ---------- Grab dotfiles ----------
    cd
    if ! [[ -d dotfiles ]]
    then
      ssh -o "StrictHostKeyChecking no" git@github.com
      git clone git@github.com:briancsparks/dotfiles.git && cd dotfiles \
        && ./setup \
        && ./setupbash
    fi

    # ---------- Get ack ----------
    cd
    if ! [[ -x ~/local/bin/ack ]]
    then
      mkdir -p ~/local/bin ~/local/lib && curl -L 'http://beyondgrep.com/ack-2.10-single-file' > ~/local/bin/ack && chmod 0755 ~/local/bin/ack
    fi

    # ---------- Install basics ----------
    cd
    if ! dpkg -s socat 2> /dev/null > /dev/null
    then

      # Make certain dirs available to scotty
      sudo mkdir -p /var/log
      sudo chown root:admin /var     && sudo chmod g+w /var
      sudo chown root:admin /var/log && sudo chmod g+w /var/log

      sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install -y openssl tree curl htop nmap mercurial build-essential git-core socat gawk libcurl4-openssl-dev ntp
      sudo apt-get install -y ncurses-dev libncurses5-dev libgdbm-dev libyaml-dev libffi-dev libreadline6 libreadline6-dev \
                              zlib1g zlib1g-dev libssl-dev autoconf libc6-dev automake libtool bison subversion pkg-config libperl-dev \
                              libpcre3 libpcre3-dev libgd-tools libsqlite3-dev sqlite3 libxml2-dev libxslt-dev libmysqlclient-dev cscope exuberant-ctags 

      # Update bootisms
      sudo perl -pi -e "s/\/mnt/\/tmp/g;" /etc/fstab
      if [[ -b /dev/xvdc ]]; then
        echo '/dev/xvdc /data auto  defaults,nobootwait,noatime,comment=cloudconfig 0 2' | sudo tee -a /etc/fstab
      fi

      sudo chmod 777 /tmp

      sudo shutdown -r now 
      exit 0
    fi

    #
    # ---------- First, we need VIM! ----------
    #
    # But, of course, we want to build it with Ruby support, so we build ruby 1.9.3 first.
    #
    # Then, we have to remove the system vi / vim
    #

    # Compile Ruby/vim
    cd
    if ! [[ -d zz_packages/vim74 ]]
    then

      # Get Ruby 1.9.3 source, into the zz_packages dir, untar, configure, make, install
      mkdir -p zz_packages && cd zz_packages && curl "http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p547.tar.gz" \
        | tar -xvz && ln -s ruby-1.9.3-p547 ruby && cd ruby && ./configure && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install; cd

      # Install Pry and awesome print
      sudo gem install pry
      sudo gem install awesome_print

      # Remove ("purge") the system vi / vim
      sudo apt-get purge -y vim vim-runtime gvim vim-tiny vim-common vim-gui-common

      # Get VIM 7.4 into the zz_packages dir, untar, configure with Ruby and others, make, install
      cd zz_packages && curl 'ftp://ftp.vim.org/pub/vim/unix/vim-7.4.tar.bz2' \
        | tar xvj && ln -s vim74 vim && cd vim \
        && ./configure --with-features=huge --enable-rubyinterp --enable-pythoninterp --enable-perlinterp --prefix=/usr && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install; cd
    fi

    # Add the good VIM plugins.
    cd
    if ! [[ -d ~/.vim/bundle ]]
    then

      # Pathogen-ify
      mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -SLso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim

      # Ack
      cd; cd .vim/ && curl -skL 'http://www.vim.org/scripts/download_script.php?src_id=10433' | tar xvz; cd

      # Tim Pope is a VIM god.
      cd ~/.vim/bundle \
        && git clone git@github.com:tpope/vim-rails.git \
        && git clone git@github.com:tpope/vim-bundler.git \
        && git clone git@github.com:tpope/vim-fugitive.git \
        && git clone git@github.com:tpope/pry-editline.git

      # Command-T
      cd ~/.vim/bundle \
        && git clone git://git.wincent.com/command-t.git command-t
      cd ~/.vim/bundle/command-t/ruby/command-t && ruby extconf.rb && make -j`grep -c ^processor /proc/cpuinfo`; cd

      # Syntastic
      cd ~/.vim/bundle && git clone https://github.com/scrooloose/syntastic.git

      cd
    fi

    # ---------- Compile Node.js ----------
    cd
#    if ! [[ -d zz_packages/node ]]
    if ! [[ -f ${HOME}/local/bin/node ]]; then

      # Get Node.js source, into the zz_packages dir, untar, configure, make, install
      mkdir -p ~/zz_packages && cd $_

      if ! [[ -d node ]]; then
        git clone git@github.com:joyent/node.git
        cd node
      else
        cd node
        make clean
        git remote update 
      fi

      git checkout tags/v0.10.33
      ./configure --prefix=${HOME}/local
      make -j`grep -c ^processor /proc/cpuinfo`
      make install

      cd
      npm install -g jshint

      cd && mkdir -p dev && cd dev \
        && npm install underscore glob node-curl
    fi

    # ---------- Redis-server ----------
    cd
    if ! [[ -d zz_packages/redis ]]
    then
      cd; cd zz_packages && curl http://download.redis.io/redis-stable.tar.gz | tar xvz && ln -s redis-stable redis && cd redis && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install
      cat redis.conf | sed "s/daemonize no/daemonize yes/; s/# bind 127.0.0.1/bind `curl http://169.254.169.254/latest/meta-data/local-ipv4 | cut -d, -f1`/" | sudo tee /etc/redis.conf > /dev/null
      sudo redis-server /etc/redis.conf
    fi

    # ---------- MongoDB ----------
    #if [[ $forced == MongoDB ]]
    #then

      if ! dpkg -s mongodb-org 2> /dev/null > /dev/null
      then

        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
        echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
        sudo apt-get update
        sudo apt-get install -y mongodb-org

        sudo chown mongodb:mongodb /data
        sudo perl -pi -e "s/^dbpath=.*/dbpath=\/data/g;" /etc/mongod.conf
        sudo service mongod restart
      fi
    #fi
    
    # ---------- nginx & Passenger ----------
    #if [[ $forced == nginx ]]
    #then

      cd
      if ! [[ -d zz_packages/nginx ]]
      then
        cd zz_packages && hg clone http://hg.nginx.org/nginx nginx && cd nginx && ln -fs ./auto/configure configure; cd

        # Passenger
        sudo gem install bundler --no-ri --no-rdoc \
          && sudo gem install passenger --no-ri --no-rdoc \
          && sudo gem install rails -v 4.1.0 --no-ri --no-rdoc

        # Dunno why a build would need non-world writable parent dir, but it does
        sudo chmod o-w /tmp
        sudo passenger-install-nginx-module --auto --prefix=/etc/nginx --nginx-source-dir=${HOME}/zz_packages/nginx --extra-configure-flags=none; cd
        sudo chmod 777 /tmp

        sudo ln -s /etc/nginx/sbin/nginx /usr/sbin/nginx
      fi
    #fi

    # ---------- ImageMagick ----------
    if [[ $forced == ImageMagick || $forced == hplip ]]
    then

      cd
      if ! [[ -d zz_packages/ImageMagick ]]
      then

        sudo apt-get install -y a2ps libtiff4-dev libfreetype6-dev libpng-dev

        echo export PKG_CONFIG_PATH=/usr/lib/pkgconfig >> ~/.profile
        cd zz_packages

        if ! [[ -f ImageMagick-6.7.9-10.tar.gz ]]; then
          curl -L http://sourceforge.net/projects/imagemagick/files/old-sources/6.x/6.7/ImageMagick-6.7.9-10.tar.gz/download -o ImageMagick-6.7.9-10.tar.gz
        fi

        if ! [[ -f ImageMagick-6.7.9-10.tar.gz ]]; then
          echo "CANNOT DOWNLOAD IMAGEMAGICK!!"
          exit 2
        fi

        cat ImageMagick-6.7.9-10.tar.gz | tar xvz 

        ln -s ImageMagick-6.7.9-10 ImageMagick
        cd ImageMagick
        ./configure --prefix=/usr --sysconfdir=/etc --with-modules --with-perl --enable-64bit && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install
        cd
      fi
    fi
    
    # ---------- hplip ----------
    if [[ $forced == hplip ]]
    then

      cd
      if ! [[ -d zz_packages/hplip ]]
      then

        echo DEVICE_URI=x >> ~/.profile

        sudo apt-get install -y libcups2 cups libcups2-dev cups-bsd cups-client libcupsimage2-dev libdbus-1-dev ghostscript \
                                libsnmp-dev libtool libusb-1.0-0-dev python-imaging policykit-1 policykit-1-gnome \
                                python-qt4 python-qt4-dbus python-dbus python-gobject python-dev python-notify \
                                a2ps libtiff4-dev libfreetype6-dev python python-reportlab libsane libsane-dev sane-utils xsane

        cd zz_packages

        if ! [[ -f hplip-3.14.6.tar.gz ]]; then
          curl -L http://sourceforge.net/projects/hplip/files/hplip/3.14.6/hplip-3.14.6.tar.gz/download -o hplip-3.14.6.tar.gz
        fi

        if ! [[ -f hplip-3.14.6.tar.gz ]]; then
          echo "CANNOT DOWNLOAD HPLIP!!"
          exit 2
        fi

        cat hplip-3.14.6.tar.gz | tar xvz 

        # remove ppds from hplip, and copy from git repository.  This gives us more control over the ppds
        git clone git@github.com:IPGPTP/mario.git mario        
        ln -s hplip-3.14.6 hplip
        rm hplip/ppd/hpcups/*.ppd.gz
        sudo cp -r mario/print_server/ppds/hp/* hplip/ppd/hpcups
        sudo rm -rf mario
        cd hplip
        pushd ppd/hpcups && gunzip *; popd
        ./configure --with-hpppddir=/usr/share/ppd/HP --libdir=/usr/lib64 --prefix=/usr --enable-udev-acl-rules --enable-qt4 \
                    --enable-doc-build --disable-cups-ppd-install --disable-foomatic-drv-install --disable-foomatic-ppd-install \
                    --disable-hpijs-install --disable-policykit --enable-cups-drv-install --enable-hpcups-install \
                    --enable-network-build --enable-dbus-build --enable-scan-build --enable-fax-build

        make -j`grep -c ^processor /proc/cpuinfo` && sudo make install
        sudo shutdown -r now 
      fi
    fi

    # ---------- epson ----------
    if [[ $forced == epsonhp || $forced == epsonaws ]]; then
      
      cd
      if ! [[ -d zz_packages/epson ]]; then

        if ! [[ -d zz_packages/hplip ]]; then
          echo "Error: Must build hplip first"
          exit 1
        else
          echo "make sure you have ssh access to mario"
          sudo apt-get install -y lsb

          mkdir -p ~/zz_packages/epson && cd $_

          # Get tar from: http://download.ebz.epson.net/dsc/du/02/DriverDownloadInfo.do?LG2=EN&CN2=&DSCMI=32949&DSCCHK=fe91afdd267711fc4a49aa597d911d10095c2867
          # Fetch the package and install it
          # curl -L -O 'https://download3.ebz.epson.net/dsc/f/03/00/03/29/49/36201e41f124a1f4f7b793533b1ade1202032276/epson-inkjet-printer-escpr-1.4.4-1lsb3.2.tar.gz'

          # Fetch the package from repository instead from epson website.  This way we have more control over it
          git clone git@github.com:IPGPTP/mario.git mario
          echo "installing epson ppds and drivers"
          sudo tar -zxvf mario/print_server/ppds/epson/epson-inkjet-printer-escpr-1.4.4-1lsb3.2.tar.gz
          echo "---------------------------------------"
          echo "copying modified wrapper.c"
          echo "---------------------------------------"
          sudo cp -f mario/print_server/lib/wrapper.c epson-inkjet-printer-escpr-1.4.4/src/
          cd epson-inkjet-printer-escpr-1.4.4
          # without sudo configure and make do not work
          sudo ./configure && sudo make && sudo make install
          cd ..
          sudo rm -rf mario

          # copy filter to correct location
          sudo service cups stop

          # for AWS copy libes* to /usr/lib, for HPCS copy to /usr/lib/x86_64-linux-gnu
          echo "copying libes* to their correct location"
          if [[ $forced == epsonhp ]]; then
            sudo cp /usr/local/lib/libes* /usr/lib/x86_64-linux-gnu
          elif [[ $forced == epsonaws ]]; then
            sudo cp /usr/local/lib/libes* /usr/lib/
          fi
          sudo cp -f /usr/local/lib/cups/filter/* /usr/lib/cups/filter
          #statements
          sudo service cups start
          # copy the installed ppd files to hpcups
          echo "Copying epson ppds to hpcups"
          sudo cp /usr/local/share/cups/model/epson-inkjet-printer-escpr/*.ppd /home/scotty/zz_packages/hplip/ppd/hpcups
          cd ..
          sudo rm -rf epson
        fi
      fi
    fi

    # ---------- foomatic ----------
    if [[ $forced == rawfoomatic ]]; then

      cd
      if ! [[ -d zz_packages/foomatic-filters ]]
      then

        sudo apt-get install -y libdbus-1-dev ghostscript

        cd zz_packages

        # Install foomatic binaries (filters)
        curl -L 'http://www.openprinting.org/download/foomatic/foomatic-filters-4.0-current.tar.gz' | tar xvz
        ln -s $(find -maxdepth 1 -type d | grep foomatic-filters | head -1) foomatic-filters

        cd foomatic-filters
        ./configure && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install-main
        cd ..

        # Install foomatic db
        curl -L 'http://www.openprinting.org/download/foomatic/foomatic-db-4.0-current.tar.gz' | tar xvz
        ln -s $(find -maxdepth 1 -type d | grep foomatic-db- | head -1) foomatic-db
        
        # Install foomatic db engine
        curl -L 'http://www.openprinting.org/download/foomatic/foomatic-db-engine-4.0-current.tar.gz' | tar xvz
        ln -s $(find -maxdepth 1 -type d | grep foomatic-db-engine | head -1) foomatic-db-engine

        cd foomatic-db-engine
        ./configure && make -j`grep -c ^processor /proc/cpuinfo` && sudo make install
        cd ..

        # Need LSB
        sudo apt-get install -y lsb

        # Install test Epson printer
        curl -L -O 'http://download.ebz.epson.net/dsc/op/stable/debian/dists/lsb3.2/main/binary-amd64/epson-inkjet-printer-201208w_1.0.0-1lsb3.2_amd64.deb'
        sudo dpkg -i epson-inkjet-printer-201208w_1.0.0-1lsb3.2_amd64.deb

      fi
    fi


    # ---------- MySQL server ----------
    if [[ $forced == mysql ]]
    then
      cd
      if ! dpkg -s mysql-server 2> /dev/null > /dev/null
      then
        sudo apt-get install -y mysql-server
        echo "Edit /etc/mysql/my.cnf" >> /tmp/buildout-message
      fi
    fi

    # ---------- Memcached-server ----------
    if [[ $forced == memcache ]]
    then
      cd
      if ! [[ -f /etc/memcached.conf ]]
      then
        sudo apt-get install -y memcached
        sudo usermod -G staff memcache
        sudo chown root:staff /var && sudo chmod g+rw /var
        sudo chown root:staff /var/log && sudo chmod g+rw /var/log
        sudo touch /var/log/memcached.log
        sudo chown memcache:staff /var/log/memcached.log
        sudo service memcached stop

        echo "Edit /etc/memcached.conf, and -m 15000 -l Xu.example.com, restart memcached" >> /tmp/buildout-message
      fi
    fi

  fi

  test -f /tmp/buildout-message && cat /tmp/buildout-message

  exit 0
fi

