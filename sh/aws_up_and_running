#!/usr/bin/env bash

#tmp_dir="/tmp/jmt/aws/$(basename $0)/$$"
tmp_dir="/tmp/jmt/aws/$(basename $0)"
mkdir -p "$tmp_dir"

instance_type="m3.xlarge"
#root_disk="ebs"
key_name="loki-prod-east"
security_groups="$key_name"
user_region="east"
region="us-east-1"
user_zone="d"
purpose="general"
count="1"

for arg in "$@"; do case $arg in
  --instance-type=*)  instance_type="${arg#*=}";      shift;;
  --root-disk=*)      root_disk="${arg#*=}";          shift;;
  --key-name=*)       key_name="${arg#*=}";           shift;;
  --sec-group=*)      security_groups="${arg#*=}";    shift;;
  --region=*)         user_region="${arg#*=}";        shift;;
  --zone=*)           user_zone="${arg#*=}";          shift;;
  --ami=*)            user_ami="${arg#*=}";           shift;;
  --count=*)          count="${arg#*=}";              shift;;
  --dry-run)          dry_run="true";                 shift;;
  --mongo)            purpose="mongo";                shift;;
  --webtier)          purpose="webtier";              shift;;

  --) shift; break;;
  *)                    echo "$arg"; shift;;

esac; done

if [ "$user_region" == "east" ]; then
  region="us-east-1"
  key_name="loki-prod-east"
  security_groups="$key_name"

  aws_ami_1204_ebs="ami-3acc7a52"
  aws_ami_1204_instance_store="ami-2f8f9246"
  aws_ami_1204_hvm="ami-34cc7a5c"

elif [ "$user_region" == "west" ]; then
  region="us-west-2"
  key_name="loki-prod-west2"
  security_groups="$key_name"

  aws_ami_1204_ebs="ami-07470537"
  aws_ami_1204_instance_store="ami-9eed86ae"
  aws_ami_1204_hvm="ami-0f47053f"

elif [ "$user_region" == "eops" ]; then
  region="us-west-2"
  key_name="mario-dev"

  if [[ $purpose == "webtier" ]]; then
    security_groups="sg-29cea44c sg-02cea467"
  else
    # app tier
    security_groups="sg-3bcea45e sg-02cea467"
  fi

  aws_ami_1204_ebs="ami-07470537"
  aws_ami_1204_instance_store="ami-9eed86ae"
  aws_ami_1204_hvm="ami-0f47053f"

  ami="$aws_ami_1204_hvm"
  user_zone="c"
fi

zone="${region}${user_zone}"
echo "$instance_type $root_disk"

if [ -n "$user_ami" ]; then
  ami="$user_ami"
else
  if echo "$instance_type" | grep '^r' 2>&1 > /dev/null; then
    if [ "$root_disk" == "ebs" ]; then
      echo "$instance_type must not use EBS"
      exit 2
    fi
    root_disk="instance"
    ami="$aws_ami_1204_hvm"
  else
    if [ "$root_disk" == "instance" ]; then
      ami="$aws_ami_1204_instance_store"
    else
      ami="$aws_ami_1204_ebs"
    fi
  fi
fi

cat <<EOF >$tmp_dir/user_data_file
#!/bin/bash -ex
user=scotty
usermod  -l \$user ubuntu
groupmod -n \$user ubuntu
usermod  -d /home/\$user -m \$user
if [ -f /etc/sudoers.d/90-cloudimg-ubuntu ]; then
  mv /etc/sudoers.d/90-cloudimg-ubuntu /etc/sudoers.d/90-cloud-init-users
fi
perl -pi -e "s/ubuntu/\$user/g;" /etc/sudoers.d/90-cloud-init-users
EOF

if [[ $dry_run == true ]]; then
  echo DRY-RUN: aws ec2 run-instances "--image-id" "$ami" "--count" 1 "--instance-type" "$instance_type" "--key-name" $key_name "--security-groups" "$security_groups" --block-device-mapping '[{"DeviceName":"/dev/sdb", "VirtualName":"ephemeral0"}, {"DeviceName":"/dev/sdc", "VirtualName":"ephemeral1"}, {"DeviceName":"/dev/sdd", "VirtualName":"ephemeral2"}, {"DeviceName":"/dev/sde", "VirtualName":"ephemeral3"}]' --profile "$user_region" --user-data "file://$tmp_dir/user_data_file" --query 'Instances[*].InstanceId'
  exit 0
fi

echo "Launching $instance_type in $security_groups in ${zone}"

# --mongo / --webtier
if [[ $purpose == "mongo" ]]; then
  block_device_mapping='[
                  { "DeviceName":"/dev/sdb", "VirtualName":"ephemeral0"},
                  { "DeviceName":"/dev/sdc", "VirtualName":"ephemeral1"},
                  { "DeviceName":"/dev/sdd", "VirtualName":"ephemeral2"},
                  { "DeviceName":"/dev/sde", "VirtualName":"ephemeral3"},
                  { "DeviceName":"/dev/sdf", "Ebs":{"VolumeSize":300}},
                  { "DeviceName":"/dev/sdg", "Ebs":{"VolumeSize":25}},
                  { "DeviceName":"/dev/sdh", "Ebs":{"VolumeSize":10}}
                ]'
elif [[ $purpose == "webtier" ]]; then
  block_device_mapping='[
                  { "DeviceName":"/dev/sdb", "VirtualName":"ephemeral0"},
                  { "DeviceName":"/dev/sdc", "VirtualName":"ephemeral1"},
                  { "DeviceName":"/dev/sdd", "VirtualName":"ephemeral2"},
                  { "DeviceName":"/dev/sde", "VirtualName":"ephemeral3"},
                  { "DeviceName":"/dev/sdf", "Ebs":{"VolumeSize":100}}
                ]'
else
  block_device_mapping='[
                  { "DeviceName":"/dev/sdb", "VirtualName":"ephemeral0"},
                  { "DeviceName":"/dev/sdc", "VirtualName":"ephemeral1"},
                  { "DeviceName":"/dev/sdd", "VirtualName":"ephemeral2"},
                  { "DeviceName":"/dev/sde", "VirtualName":"ephemeral3"}
                ]'
fi

# sg-02cea467 sg-3bcea45e    app
#  subnet-30638c69
# sg-02cea467 sg-81d2b8e4    db
#  subnet-43759a1a
# sg-02cea467 sg-29cea44c    web
#  subnet-33638c6a
aws ec2 run-instances \
            --image-id "$ami" \
            --count "$count" \
            --instance-type "$instance_type" \
            --key-name "$key_name" \
            --security-group-ids sg-02cea467 sg-81d2b8e4 \
            --subnet-id subnet-43759a1a \
            --profile "$user_region" \
            --user-data "file://$tmp_dir/user_data_file" \
            --placement "AvailabilityZone=${zone}" \
            --block-device-mapping "${block_device_mapping}" \
            --associate-public-ip-address
exit

#instance_id=$(aws ec2 run-instances \
#              --image-id "$ami" \
#              --count "$count" \
#              --instance-type "$instance_type" \
#              --key-name "$key_name" \
#              --security-groups mario-dev-web mario-admins1 \
#              --profile "$user_region" \
#              --user-data "file://$tmp_dir/user_data_file" \
#              --placement "AvailabilityZone=${zone}" \
#              --block-device-mapping "${block_device_mapping}" \
#              --query 'Instances[*].InstanceId')

echo $instance_id

state="looking"
while [ "$state" != "running" ]; do
  if [ "$state" != "running" ]; then echo "$(date)   $state"; fi
  state=$(aws ec2 describe-instances --instance-ids "$instance_id" --query 'Reservations[0].Instances[0].State.Name' --profile "$user_region" | sed 's/"//g')
  sleep 0.1
done

dns_name=$(aws ec2 describe-instances --instance-ids "$instance_id" --query 'Reservations[0].Instances[0].PublicDnsName' --profile "$user_region" | sed 's/"//g')
echo $dns_name

## To use ephemeral drives: (Look at what is attached (fdisk), format, mount)
##sudo fdisk -l
##
##sudo mkfs.ext4 /dev/xvdb
##sudo mkdir /mnt/b
##sudo mount -t ext4 /dev/xvdb /mnt/b




