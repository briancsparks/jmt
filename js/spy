#!/usr/bin/env node
/* vim: filetype=javascript :
 *
 * Spy on a file and when it changes, spit out a string.
 *
 * Generally, you pipe spy to a command:
 *
 *        spy "load %s1" foo.dat | run-some-command
 *
 * This will send the string "load foo.dat" to the stdin of run-some-command.
 */

var _         = require('underscore');
var util      = require('util'), sys = util;
var fs        = require('fs');
var path      = require('path');
var glob      = require('glob');
var sg        = require('./utils/sg');
var spawn     = require('child_process').spawn;

var die_trying  = sg.die_trying;
var printf      = sg.printf;

var m;
var options = {};
var filenames = {};
var commandToRun = [];

var commandFilename, theCommand;

var main = function() {
  sg.__run([

    // Process command-line parameters
    function(next) {
      var processingFilenames = false;
      var processingCommand   = false;

      if (process.argv.length <= 2) {
        sg.die(1, "Usage: spy [--quote | -q | --verbose] format filename");
      }

      sg.__each(next, _.rest(process.argv, 2), function(arg, nextArg) {
        if (arg === '--')  { processingFilenames = true;  processingCommand   = false; return nextArg(); }
        if (arg === '---') { processingFilenames = false; processingCommand   = true;  return nextArg(); }

        if (processingFilenames) {
          return glob(arg, function(err, files) {
            if (err) { console.error(err); }

            _.each(files, function(file) {
              var fullFilename = file[0] === '/' ? file : path.join(process.cwd(), file);
              filenames[fullFilename] = true;
            });
            return nextArg();
          });
        }

        /* otherwise */
        if (processingCommand) {
          commandToRun.push(arg);
          return nextArg();
        }

        /* otherwise */
        if ((m = /^--(.+)/.exec(arg))) { options[sanitizeKey(m[1])] = true; return nextArg(); }
        if ((m = /^-(.+)/.exec(arg)))  { options[sanitizeKey(m[1])] = true; return nextArg(); }

      });

    }, function(next) {
      theCommand = commandToRun.join(' ');

      return next();

    // Write the command to a tmp file
    }, function(next) {
      var commandDir = path.join('/tmp', 'spy');


      return fs.mkdir(commandDir, function(err) {

        commandFilename = path.join(commandDir, 'spy-cmd');
        var commandFileContent = '#!/bin/bash -e\n' + commandToRun.join(' ') + '\n';
        return fs.writeFile(commandFilename, commandFileContent, function(err) {
          if (err) { console.error(err); }
          return fs.chmod(commandFilename, 0777, function(err) {
            if (err) { console.error(err); }
            return next();
          });
        });
      });

    }],

    // main
    function() {
      logit('files: ', _.keys(filenames));
      logit('command to execute: ', theCommand);
      logit('options: ', options);

      if (options.dry_run) {
        process.exit(0);
      }

      _.each(filenames, function(item, filename) {
        watch(filename, _.keys(filenames).length < 2);
      });
    }
  );
};

var watch = function(filename, autoLaunch) {
  logit("Watching: " + filename);
  var printIt = function(curr, prev, force) {
    if (!force && curr.mtime === prev.mtime) { return; }

    console.log("Processing: " + filename + ' -----------------------------------------');
    var command = spawn(commandFilename, [filename]);

    command.stdout.setEncoding('utf8');
    command.stdout.on('data', function(chunk) {
      process.stdout.write(chunk);
    });

    command.stderr.setEncoding('utf8');
    command.stderr.on('data', function(chunk) {
      process.stderr.write(chunk);
    });

    command.on('exit', function(code, signal) {
      process.stderr.write('done------------------------------------\n');
    });

//    return exec([commandFilename, filename].join(' '), function(err, stdout, stderr) {
//
//      console.error('stdout++++++++++++');
//      console.log(stdout);
//      console.error('stdout------------');
//
//      if (stderr) {
//        console.error('stderr++++++++++++');
//        console.error(stderr);
//        console.error('stderr------------');
//      }
//
//      console.log("");
//    });
  };

  fs.watchFile(filename, {persistent: true, interval: 25}, function(curr, prev) {
    printIt(curr, prev);
  });

  // print it once to start
  if (autoLaunch) {
    printIt(null, null, true);
  }
};

var logit = function() {
  if (options.verbose) {
    console.error.apply(this, arguments);
  }
};

var sanitizeKey = function(key) {
  return key.replace(/-/g, '_');
};

main();

