#!/usr/bin/env node
/* vim: filetype=javascript :
 */

var _             = require('underscore');
var fs            = require('fs');
var path          = require('path');
var EventEmitter  = require('events').EventEmitter;
var exec          = require('child_process').exec;

var sg            = require('./utils/sg');
var ARGV          = sg.ARGV();
var redis         = new sg.Redis({port: ARGV.port});
//var prf           = new sg.Profiler();

var stats = {remainders:[]};
var hourLineNums = {};
var slug_day;

Error.stackTraceLimit = Infinity;

var main = function() {

  var js_filename, lua_filename;
  var luaScript = '';
  var luaMoniker = '';
  var js, jsf;
  var currSecond, currMinute, currHour, currDay, currMonth, currYear;
  var closeDayBashScript = path.join(__dirname, '_redis/_sh/closeDay.sh');
  var pausedTooMuchInput = false, pausedToLetRedisCatchup = false;
  var commitFn = [], deleteSlugFn = [];

  var isPaused = function() {
    return pausedTooMuchInput || pausedToLetRedisCatchup;
  };

  sg.__run([
    function(next) {
      if (ARGV.args.length < 2) {
        console.error('Usage: redis_feeder js-file lua-file');
        process.exit(2);
      }

      js_filename = ARGV.args[0];
      lua_filename = ARGV.args[1];

      process.stdin.setEncoding('utf8');
      return next();
    },

    function(next) {
      return redis.events.once('loaded', next);
    },

    function(next) {

      var Processor = function() {
        var self = this;

        self._ = _;
        self.typeName = 'foo';

        self.processFields = function(fields, options, callback) {
          return callback(null, fields);
        };

        self.split = function(line) {
          var ret = line.split(/[ \t]/);
          ret.unshift(line);
          return ret;
        };

        self.ev = new EventEmitter();
        var internalEv = new EventEmitter();

        self.on = function(eventName, handler) {
          internalEv.on(eventName, handler);
        };

        /**
         *  Generate each of the open functions.
         */
        _.each(['openSecond', 'openMinute', 'openHour', 'openDay', 'openMonth', 'openYear'], function(name) {
          self.ev.on(name, function(a, callback) {
            //prf.count(name);

            redis.RUN_SCRIPT(luaMoniker, 0, '_'+name, a);
            if (!internalEv.emit(name, a, callback)) {
              return callback();
            }
            //return internalEv.emit(name, a, callback);
          });

          self[name] = function() {
            var args = [luaMoniker, 0, name].concat(Array.prototype.slice.apply(arguments));
            redis.RUN_SCRIPT.apply(redis, args);
          };
        });

        /**
         *  Generate each of the close functions.
         */
        self.ev.on('closeDay', function(curr_day, prev_day, callback) {
          //prf.count('closeDay');
          var mainlett = function() {
            if (!internalEv.emit('closeDay', curr_day, prev_day, after)) {
              return after(curr_day, prev_day);
            }
          };

          var after = function(curr_day, prev_day) {
            redis.RUN_SCRIPT(luaMoniker, 0, '_closeDay', curr_day, prev_day);
            if (js.enumType !== 'serialize') {
              return callback();
            }

            //console.trace('closeDay');
            console.log('------------------------------------------ closeDay ' + prev_day + ' ' + curr_day);
            process.stdin.pause();
            pausedToLetRedisCatchup = true;
            return exec([closeDayBashScript, ARGV.port, 0, 'access', prev_day].join(' '), function(err, stdout, stderr) {
              pausedToLetRedisCatchup = false;
              if (!isPaused()) {
                process.stdin.resume();
              }

              console.log('++++++++++++++++++++++++++++++++++++++++++ done-closeDay');
              console.log(err);
              console.log(stdout);
              console.log(stderr);
              return callback();
            });
          };

          return mainlett();
        });

        self.closeDay = function(curr_day, prev_day) {
          redis.RUN_SCRIPT(luaMoniker, 0, 'closeDay', curr_day, prev_day);
        };

        _.each(['closeSecond', 'closeMinute', 'closeHour', 'closeMonth', 'closeYear'], function(name) {
          self.ev.on(name, function(a, b, callback) {
            //prf.count(name);
            var postProcess = function() {

              //if (name === 'closeHour' || name === 'closeMinute') {
                var args = [luaMoniker, 0, '_'+name].concat(Array.prototype.slice.apply(arguments));
                redis.RUN_SCRIPT.apply(redis, args);
              //}
              return callback();
            };

            if (EventEmitter.listenerCount(internalEv, name) > 0) {
              return internalEv.emit(name, a, b, postProcess);
            }

            /* otherwise */
            return postProcess(a, b);
          });

          self[name] = function() {
            var args = [luaMoniker, 0, name].concat(Array.prototype.slice.apply(arguments));
            redis.RUN_SCRIPT.apply(redis, args);
          };
        });

      };

      js = new Processor();

      try {
        var userJsFile = path.join(process.cwd(), js_filename);
        if (fs.statSync(userJsFile)) {
          jsf = require(userJsFile);
        } 
      } catch(e) {}

      if (!jsf) {
        try {
          var userJsFile = js_filename;
          if (fs.statSync(userJsFile)) {
            jsf = require(userJsFile);
          } 
        } catch(e) {}
      }

      if (!jsf) {
        console.error('Cannot find user JS file: ' + userJsFile);
        process.exit(2);
      }

      return jsf.init(js, function() {
        return next();
      });
    },

    // Inspect the types
    function(next) {
      var m, ty, name;
      var slugname = js.typeName+'_slug_';

      console.log('---------------------------------');
      commitFn.push(
          "local function __commit_slug(...)",
          "  if abort_commit ~= 0 then",
          "    return",
          "  end",
          "",
          "  local id, value, holder, a, b, c, d, _, magn",
          //"  curr_slug = redis.call('GET', 'token:" + js.typeName + "_slug:id')",
          ""
          );

      _.each(js.types, function(spec, index_) {
        var index = index_ + 1;
        name = spec.name;
        ty   = spec.ty;

        if (name) {
          commitFn.push("  -- " + name +": " +ty);
        }

        if (ty === 'enum') {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    id = get_id('" + name + "', value)",
            "    holder = '" + name+"_id:'..id..':" +slugname +"'",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "_id', id)",
            "    redis.call('SADD', holder, curr_slug)",
            "    redis.call('SADD', 'holder:" +js.typeName +"_slug:key', holder)",
            "  end"
            );

          if (js.enumType !== "bulk") {
            commitFn.push("");
          }

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"_id'"
              );

        }

        if (ty === 'ip_addr') {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    local ip = value",
            "    _, _, a, b, c, d = string.find(ip, '(%d+).(%d+).(%d+).(%d+)')",
            "    id = (((((a*256) + b)*256) + c)*256 +d)",
            "    holder = '" + name+"_id:'..id..':" +slugname +"'",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "_id', id)",
            "    redis.call('SADD', holder, curr_slug)",
            "    redis.call('SADD', 'holder:" +js.typeName +"_slug:key', holder)",
            "  end"
            );

          if (js.enumType !== "bulk") {
            commitFn.push("");
          }

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"_id'"
              );

        }

        if (ty === "lite_enum" || ty === "guid" || ((ty === 'enum' || ty === 'ip_addr') && js.enumType === "bulk")) {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    holder = '" + name+":'..value..':" +slugname +"'",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "', value)",
            "    redis.call('SADD', holder, curr_slug)",
            "    redis.call('SADD', 'holder:" +js.typeName +"_slug:key', holder)",
            "  end",
            ""
            );

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"'"
              );

        }

        else if (ty === "string") {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "', value)",
            "  end",
            ""
            );

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"'"
              );

        }

        else if (ty === 'ln') {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    magn = math.floor(math.log(tonumber(value))/math.log(2))",
            "    holder = '" + name+"_magn:'..magn..':" +slugname +"'",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "_magn', magn)",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "', value)",
            "    redis.call('SADD', holder, curr_slug)",
            "    redis.call('SADD', 'holder:" +js.typeName +"_slug:key', holder)",
            "  end",
            ""
            );

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"_magn'",
              "'" +js.typeName +"_slug:'..slug..':" +name +"'"
              );

        }

        else if (ty === "nenum" || ty === "db_id") {
          commitFn.push(
            "  value = arg[" + index + "]",
            "  if value ~= '-' then",
            //"    redis.call('ZINCRBY', 'debug:ty:counts', 1, '" + ty + "')",
            "    holder = '" + name+":'..value..':" +slugname +"'",
            "    redis.call('SET', '" + js.typeName + "_slug:'..curr_slug..':" + name + "', value)",
            "    redis.call('SADD', holder, curr_slug)",
            "    redis.call('SADD', 'holder:" +js.typeName +"_slug:key', holder)",
            "  end",
            ""
            );

          deleteSlugFn.push(
              "'" +js.typeName +"_slug:'..slug..':" +name +"'"
              );

        }

      });

      commitFn.push(
          //"redis.log(redis.LOG_NOTICE, '__commit_slug(2)')",
          "end"
          );

      deleteSlugFn.push(
          "'" +js.typeName +"_slug:'..slug..':date'",
          "'" +js.typeName +"_slug:'..slug..':time'",
          "'" +js.typeName +"_slug:'..slug..':second'",
          "'" +js.typeName +"_slug:'..slug..':n_second'",
          "'" +js.typeName +"_slug:'..slug..':expiration'"
          );
      deleteSlugFn = [
          "local function __delete_slug(slug)",
          "  redis.pcall('DEL',\n    " + deleteSlugFn.join(",\n    ") + ")",
          "end"
          ];

      //console.log(commitFn.join('\n'));
      //console.log(deleteSlugFn.join('\n'));

      return next();
    },

    // Load LUA scripts
    function(next) {

      return fs.readFile(path.join(__dirname, '_redis/_lua/feeder.lua'), function(err, prefix) {

        prefix =  "local typename = '" + js.typeName + "'\n" +        // I.e. "access"
                  "local enum_type = '" + js.enumType + "'\n" +       // I.e. "bulk" or "serialize"
                  deleteSlugFn.join("\n") + "\n" + 
                  prefix + "\n" +
                  commitFn.join("\n") + "\n";

        return fs.readFile(path.join(__dirname, '_redis/_lua/feeder_suffix.lua'), function(err, suffix) {
          return redis.SCRIPT_LOAD(lua_filename, prefix, suffix, function(err, moniker) {
            luaMoniker = moniker;
            return next();
          });
        });
      });
    },
    
    // Register type
    function(next) {
      var types = [];

      _.each(js.types, function(ty) {
        if (ty.name && ty.ty) {
          types.push(ty.name + ':' + ty.ty);
        } else {
          types.push('-');
        }
      });

      var args = [luaMoniker, 0, 'init'].concat(types);
      redis.RUN_SCRIPT.apply(redis, args);
      return next();
    }],


    function(next) {
      var dispatchLine = function(line, lineNum, callback) {
        if (line.length <= 0) { return callback(); }

        var fields, dateSeconds = {}, opens = [];

        //prf.count('dispatchLine-top');
        return sg.__run([

          // --- Split the line and get the time for it
          function(next) {
            var m;

            //prf.count('dispatchLine-split');
            if (_.isArray(fields = js.split(line.toLowerCase()))) {
              // Make totally sure the date is formatted correctly
              //   YYYY       / MM    /  DD   / HH    / MM    / SS
              if ((m = /^(\d\d\d\d)\D(\d\d)\D(\d\d)\D(\d\d)\D(\d\d)\D(\d\d)$/.exec(fields[1]))) {
                fields.time = [m[1], m[2], m[3], m[4], m[5], m[6]];
                slug_day = [m[1], m[2], m[3]].join('/');
                dateSeconds[slug_day] = dateSeconds[slug_day] || (new Date(m[1], m[2]-1, m[3])).getTime() / 1000;
                return next();
              }

              console.error('Date does not parse: ', line);
              return callback({error:'EBADDATE', info:line});
            }

            // Null for fields is not an error, we just skip it
            if (fields === null) {
              return callback();
            }

            // Error
            console.error('error == ', fields, line);
            return callback({error:fields, info:line});
          },

          // --- Close out any time-frames
          function(next) {
            //prf.count('dispatchLine-close');
            fields[1] = fields.time.join('/');
            var recordValueMinute = _.first(fields.time, 5).join('/');
            var recordValueHour, recordValueDay, recordValueMonth, recordValueYear;

            var prevSecond = currSecond;

            // Close the second?
            var recordValueSecond = fields.time.join('/');
            if (recordValueSecond !== currSecond) {
              currSecond = fields.time.join('/');
              opens.unshift(function(next) {
                return js.ev.emit('openSecond', currSecond, function() {
                  return next();
                });
              });
              if (!prevSecond) { return next(); }
              return js.ev.emit('closeSecond', recordValueSecond, prevSecond, function() {
                var prevMinute = currMinute;

                // Close the minute?
                if (recordValueMinute !== currMinute) {
                  currMinute = _.first(fields.time, 5).join('/');
                  opens.unshift(function(next) {
                    return js.ev.emit('openMinute', currMinute, function() {
                      return next();
                    });
                  });
                  if (!prevMinute) { return next(); }
                  return js.ev.emit('closeMinute', recordValueMinute, prevMinute, function() {
                    var prevHour = currHour;

                    // Close the hour?
                    recordValueHour = _.first(fields.time, 4).join('/');
                    if (recordValueHour !== currHour) {
                      currHour = _.first(fields.time, 4).join('/');
                      hourLineNums[lineNum] = currHour;
                      opens.unshift(function(next) {
                        return js.ev.emit('openHour', currHour, function() {
                          return next();
                        });
                      });
                      if (!prevHour) { return next(); }
                      return js.ev.emit('closeHour', recordValueHour, prevHour, function() {
                        var prevDay = currDay;

                        // Close the day?
                        recordValueDay = _.first(fields.time, 3).join('/');
                        if (recordValueDay !== currDay) {
                          currDay = _.first(fields.time, 3).join('/');
                          opens.unshift(function(next) {
                            return js.ev.emit('openDay', currDay, function() {
                              return next();
                            });
                          });
                          if (!prevDay) { return next(); }
                          return js.ev.emit('closeDay', recordValueDay, prevDay, function() {
                            var prevMonth = currMonth;

                            // Close the month?
                            recordValueMonth = _.first(fields.time, 2).join('/');
                            if (recordValueMonth !== currMonth) {
                              currMonth = _.first(fields.time, 2).join('/');
                              opens.unshift(function(next) {
                                return js.ev.emit('openMonth', currMonth, function() {
                                  return next();
                                });
                              });
                              if (!prevMonth) { return next(); }
                              return js.ev.emit('closeMonth', recordValueMonth, prevMonth, function() {
                                var prevYear = currYear;

                                // Close the year?
                                recordValueYear = _.first(fields.time, 1).join('/');
                                if (recordValueYear !== currYear) {
                                  currYear = _.first(fields.time, 1).join('/');
                                  opens.unshift(function(next) {
                                    return js.ev.emit('openYear', currYear, function() {
                                      return next();
                                    });
                                  });

                                  if (!prevYear) { return next(); }
                                  return js.ev.emit('closeYear', recordValueYear, prevYear, function() {
                                    return next();
                                  });
                                }
                                return next();
                              });
                            }
                            return next();
                          });
                        }
                        return next();
                      });
                    }
                    return next();
                  });
                }
                return next();
              });
            }
            return next();
          },

          /**
           *
           */
          function(next) {
            //prf.count('dispatchLine-processFields');

            // Call the JS to do any additional processing
            return js.processFields(fields, {skip:{}}, function(err, fields) {

              // Null for fields is not an error, we just don't send it to redis
              if (fields === null) {
                return next();
              }

              // Write the item to LUA
              fields.shift();
              fields.unshift(dateSeconds[slug_day]);
              var args = [luaMoniker, 0, 'start_slug'].concat(fields);
              //console.log(fields);
              redis.RUN_SCRIPT.apply(redis, args);

              return next();
            });
          },
          
          /**
           *  Open the item
           */
          function(next) {
            //prf.count('dispatchLine-openTimeFrames');
            
            // Call the appropriate open functions
            sg.__each(opens,
              function(open, next) {
                return open(next);
              }, 
              function done() {
                return next();
              }
            );
          }],

          function done() {
            //prf.count('dispatchLine-done');
            // Commit the data

            var args = [luaMoniker, 0, '_commit_slug'].concat(fields);
            redis.RUN_SCRIPT.apply(redis, args);

            //redis.RUN_SCRIPT(luaMoniker, 0, 'commit_slug');
            if (hourLineNums[lineNum]) {
              console.log('done: ', hourLineNums[lineNum]);
            }
            return callback();
          }
        );

      };

      var shutdown = false;
      var prf_count = function() {
        if (!shutdown) {
          //prf.count.apply(this, arguments);
        }
      };

      var lines = [], numLines = 0, numWaited = 0;
      var dispatchLines = function() {
        prf_count('dispatchedLine--trying');

        if (lines.length > 0) {
          prf_count('dispatchedLine--len > 0');
          if (pausedTooMuchInput && lines.length < 2000) {
            pausedTooMuchInput = false;
            if (!isPaused()) {
              console.log('Resuming at ' + lines.length);
              process.stdin.resume();
            }
          }

          if (isPaused() && pausedTooMuchInput === false) {
            if ((numWaited % 15) === 0) {
              console.log("Paused -- not processing lines " + numWaited);
            }
            numWaited++;
            return setTimeout(dispatchLines, 1000);
          }

          numLines++;
          var line = lines.shift();
          prf_count('dispatchedLine--call');

          return dispatchLine(line, numLines, function() {
            prf_count('dispatchLine-return');
            if (numLines % 10 !== 0) {
              return dispatchLines();
            }
            setImmediate(dispatchLines);
          });
        } else if (shutdown) {
          var lastLine = oneLastLine();
          
          if (lastLine) {
            return dispatchLine(lastLine, numLines + 1, function() {
              sg.shutdown();
            });
          } 
          //redis.RUN_SCRIPT(luaMoniker, 0, '_closeAll');
          //setTimeout(function() {
          //  sg.shutdown();
          //}, 5000);
        }
      };

      var remainder = '', numChunks = 0;
      process.stdin.on('data', function(chunk) {
        var numLinesOnEnter = lines.length;
        numChunks++;
        lines = lines.concat((remainder + chunk).split('\n'));
        remainder = lines.pop();
        stats.remainders.push(remainder.length);
        if (lines.length > 20000) {
          console.log('Pausing at ' + lines.length);
          process.stdin.pause();
          pausedTooMuchInput = true;
        }

        if (numLinesOnEnter === 0) {
          return dispatchLines();
        }
      });

      process.stdin.on('end', function() {
        lines = lines.concat((remainder).split('\n'));
        shutdown = true;
        //addOneLastLine();
        return dispatchLines();
      });

      process.on('exit', function() {
        //console.log('END', numChunks, stats);
        lines = lines.concat((remainder).split('\n'));
        shutdown = true;
        return dispatchLines();
      });

      var numOneLastLineCalls = 0;
      var oneLastLine = function() {
        if (numOneLastLineCalls > 0) { return; }
        numOneLastLineCalls++;

        var slugDayParts = slug_day.split('/');
        var nextDay = new Date(slugDayParts[0], slugDayParts[1]-1, slugDayParts[2]);
        nextDay.setTime(nextDay.getTime() + 24*60*60*1000);

        var line = [[nextDay.getFullYear(), sg.pad(nextDay.getMonth()+1, 2, '0'), sg.pad(nextDay.getDate(), 2, '0')].join('/') + '/00:00:00'];
        _.each(_.range(/*js.types.length*/12 -1), function(i) {
          line.push('-');
        });
        //lines.push(line.join(' '));
        return line.join(' ');
      };
    }
  );
};

if (__filename === process.argv[1]) {
  main();
}

