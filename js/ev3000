#!/usr/bin/env node
/**
 * vim: filetype=javascript :
 */


var d = {
  list  : [],
  std   : {}
};

/**
 *  The outer main function.
 *
 *  Creates closure so nothing besides 'd' is at the outer-most scope
 */
var main = function(undefined) {

  var net         = require('net');
  var urlLib      = require('url');
  var sg          = require('./utils/sg');
  var _           = require('underscore');

  var listeners = {}, numListeners = 0;
  var results = {};
  var numResults = 0;

  sg.__run([
    function(next) {

      sg.Runner = function() {
        var self = this;
        var e = self.environment = {};

        var push = function(x) {
          d.list.push(x);
        };

        var queue = [];
        self.enqueue = function(script, connection) {
          var scriptsOnEnter = queue.length;
          queue.push({script: script, connection: connection});

          if (scriptsOnEnter === 0) {
            dispatch();
          }
        };

        var dispatch = function() {
          var meta, script, m, lines, resultName, options = {};

          if (queue.length > 0) {

            numResults++;
            resultName = 'r_' + numResults;

            meta = queue.shift();
            options.connection = meta.connection;

            script = meta.script.join('');
            lines = script.split('\n');
            if (lines && lines.length > 0 && (m = /^(\s*[a-z_][a-z0-9_]*)\s*:=\s*(.*)$/i.exec(lines[0]))) {
              resultName = m[1];
              lines[0] = m[2];
            }

            options.startTime = new Date();
            options.resultName = resultName;

            //var stats = self.exec(lines.join('\n'));
            return self.exec(lines.join('\n'), function(err, stats) {
              return d.std.publishResult(stats, options, function(err) {
                setImmediate(dispatch);
              });
            });
          }
        };

        self.exec = function(script, callback) {
          var $_ = {}, $n = 0, $a = [], $h = {};
          var _stats = {userResult: null};

          _stats.startTime = new Date();
          _stats.numProcessed = 0;
          _stats.perf = {};

          var histo = function(bucket, value_) {
            var value = value_ || 1;
            $h[bucket] = ($h[bucket] || 0) + value;
          };

          var eachItem = function(fn, doCount) {
            _.each(d.list, function(l, lIndex) {
              _.each(l, function(x, xIndex) {
                if (doCount) {
                  _stats.numProcessed++;
                }
                fn(x, xIndex, l, lIndex);
              });
            });
          };

          var filter = function(filterFn, fn) {
            eachItem(function(x, xIndex, l, lIndex) {
              var good = filterFn.apply(this, arguments);
              if (good) {
                _stats.numProcessed++;
                fn.apply(this, arguments);
              }
            }, false);
          };

          var localCallback = function(err, userResult) {
            _stats.finalResult = _stats.userResult = userResult;

            _stats.endTime = new Date();
            _stats.elapsed = _stats.endTime - _stats.startTime;

            // Try and be smart about what the user did
            if (_stats.finalResult === undefined || _stats.finalResult === null) {
              if (_.keys($_).length > 0) {
                _stats.finalResult = $_;
              } else if (_.keys($h).length > 0) {
                _stats.finalResult = $h;
              } else if ($a.length > 0) {
                _stats.finalResult = $a;
              } else if ($n !== 0) {
                _stats.finalResult = $n;
              }
            }

            if (_stats.finalResult === undefined || _stats.finalResult === null) {
              console.log(d.std.port, _.keys($_), _.keys($h), $a.length, $n);
            }

            return callback(err, _stats);
          };

          var getCallbackWasCalled = false;
          var getCallback = function() {
            getCallbackWasCalled = true;
            return callback;
          };

          try {
            _stats.finalResult = _stats.userResult = eval(script);
          } catch(err) {
            _stats = _.extend(_stats, {error: err});
          }

          if (!getCallbackWasCalled) {
            return localCallback(_stats.error, _stats.userResult);
          }
        };
      };
      return next();
    },
    
    function(next) {
      d.std.publishResult = function(stats, options, callback) {
        options.resultName = options.resultName || 'r_' + (++numResults);
        results[options.resultName] = stats;

        var output = options.resultName + ':= ';
        try {
          output += JSON.stringify(stats.finalResult);
        } catch(err) {
          output += stats.finalResult;
        }

        if (options.startTime && /^[0-9]+$/.exec(stats.finalResult)) {
          output += '  [' + (parseInt(stats.finalResult, 10) * 1000 / (new Date() - options.startTime)) + ']';
        }
        output += '\n';

        if (stats.finalResult !== 0) {
          console.log(d.std.port, '                                                    ' + output.replace(/\n/, ''), (new Date() - options.startTime) * 0.001);
        }

        if (options.connection) {
          options.connection.write(JSON.stringify(stats.finalResult), 'utf8');
          options.connection.end();
        }

        //_.each(listeners, function(listener) {
        //  listener.write(output, 'utf8');
        //});
        return callback();
      };

      return next();
    }],

    /**
     *  The main function.
     *
     *  Create listening ports:
     *
     *  1. The 'normal' or 'main' port:  the one that raw JS is sent to.
     *  2. The output of 'publishing' port.  Results or other output is sent here.
     */
    function main2() {
      var ARGV        = sg.ARGV();
      var runner      = new sg.Runner();

      d.std.port      = parseInt(ARGV.port || 9432, 10);

      // ---------- Create the input port---------- 
      var server = net.createServer({allowHalfOpen:true});
      server.on('connection', function(connection) {

        var chunks = [], length = 0;
        connection.on('data', function(chunk) {
          chunks.push(chunk);
          length += chunk.length;
        });

        connection.on('end', function() {
          d.std.enqueueScript(chunks, connection);
          console.log(d.std.port, 'script: ' + length);
        });

      });

      d.std.enqueueScript = function(chunks, connection) {
        runner.enqueue(chunks, connection);
      };

      console.log('Listening on ' + d.std.port);
      server.listen(d.std.port);
      //server.listen('/tmp/ev3000_server');

      // ---------- Create the output publishing port---------- 
      var publish = net.createServer();
      publish.on('connection', function(connection) {

        var name;

        numListeners++;
        name = 'L' + numListeners;
        listeners[name] = connection;

        var disconnectListener = function() {
          delete listeners[name];
          console.log('Removing subscriber: ' + name);
        };

        connection.on('end', function() {
          disconnectListener();
        });

        connection.on('error', function() {
          disconnectListener();
        });

        console.log('New subscriber: ' + name);
      });

      d.std.publishPort = d.std.port + 1000;
      console.log('Publishing on ' + (d.std.publishPort));
      publish.listen(d.std.publishPort);
      //publish.listen('/tmp/ev3000_publish');

      // Stats
      var dumpStats = function() {
        console.error(_.map(d.std.rawList.strings, function(stringPool, index) {
            return _.keys(stringPool).length;
          }).join(', ')
        );

        setTimeout(dumpStats, 1000);
      };
      //dumpStats();

    }
  );
};

main();

